#
# Limit resources for a new OpenShift guest user on a node
#
# NOTE: If you change these, please run the following commands:
#       service mcollective restart
#       oo-cgroup-enable --with-all-containers
#       oo-pam-enable --with-all-containers
#       oo-admin-ctl-tc restart
#
#
# Standard Profile
#
node_profile=<%= scope.lookupvar('::openshift_origin::node_profile') %>

#
# Quotas: File system limits
#
quota_files=<%= scope.lookupvar('::openshift_origin::node_quota_files') %>
# 1GB.  1 block = 1024byte
quota_blocks=<%= scope.lookupvar('::openshift_origin::node_quota_blocks') %>

# Gear usage limits:
# "apps" accounting used outdated logic ("git repos" not "gears"). It is being
# replaced with "gears" accounting. Logic for max_active_gears falls back to
# use max{_active,}_apps if not set, and vice versa. Gears usage/capacity/limits
# are counted according to actual gears regardless.
#
# max_active_gears is used for limiting/guiding gear placement.
# For no over-commit, should be (Total System Memory - 1G) / memory_limit_in_bytes
max_active_gears=<%= scope.lookupvar('::openshift_origin::node_max_active_gears') %>

# no_overcommit_active enforces max_active_gears in a more stringent manner than normal,
# however it also adds overhead to gear creation, so should only be set to true
# when needed, like in the case of enforcing single tenancy on a node.
no_overcommit_active=<%= scope.lookupvar('::openshift_origin::node_no_overcommit_active') %>

# PAM - resource limits
# limits_core
#<item> can be one of the following:
# limits_core=unlimited         # limits the core file size (KB)
# limits_data=unlimited         # max data size (KB)
# limits_fsize=unlimited        # maximum filesize (KB)
# limits_memlock=unlimited      # max locked-in-memory address space (KB)
# limits_nofile=unlimited       # max number of open files
# limits_rss=unlimited          # max resident set size (KB)
# limits_stack=unlimited        # max stack size (KB)
# limits_cpu=unlimited          # max CPU time (MIN)
limits_nproc=<%= scope.lookupvar('::openshift_origin::node_limits_nproc') %>        # max number of processes
# limits_as=unlimited           # address space limit (KB)
# limits_maxlogins=unlimited    # max number of logins for this user
# limits_maxsyslogins=unlimited # max number of logins on the system
# limits_priority=unlimited     # the priority to run user process with
# limits_locks=unlimited        # max number of file locks the user can hold
# limits_sigpending=unlimited   # max number of pending signals
# limits_msgqueue=unlimited     # max memory used by POSIX message queues (bytes)
# limits_nice=19   # max nice priority allowed to raise to values: [-20, 19]
# limits_rtprio=19 # max realtime priority

# Traffic control.  used by /etc/init.d/openshift-tc
tc_max_bandwidth=<%= scope.lookupvar('::openshift_origin::node_tc_max_bandwidth') %>   # mbit/sec - Total bandwidth allowed for Libra
tc_user_share=<%= scope.lookupvar('::openshift_origin::node_tc_user_share') %>    # mbit/sec - one user is allotted...

#
# Cgroups resource management
#
# Names and values may be implementation specific. These values will
# be the defaults for a gear.
#
# cpu cpu_rt_period_us=100000 cpu_rt_runtime_us=950000
cpu_shares=<%= scope.lookupvar('::openshift_origin::node_cpu_shares') %>
cpu_cfs_quota_us=<%= scope.lookupvar('::openshift_origin::node_cpu_cfs_quota_us') %>
#
# memory
memory_limit_in_bytes=<%= scope.lookupvar('::openshift_origin::node_memory_limit_in_bytes') %>       # 512MB
memory_memsw_limit_in_bytes=<%= scope.lookupvar('::openshift_origin::node_memsw_limit_in_bytes') %> # 512M + 100M (100M swap)
# memory_soft_limit_in_bytes=-1
# memory_swappiness=60
memory_move_charge_at_immigrate=1
memory_oom_control=<%= scope.lookupvar('::openshift_origin::node_memory_oom_control') %>

#
# Cgroup templates
#
# Templates are applied to a gear under certain circumstances and then
# typically reverted back to the default.  It is a good idea to have a
# default value for every value modified in a template to allow its
# default value to be restored.
#
# The frozen and thawed templates are an exception to this rule.
#
# The set of required templates are: cg_template_throttled,
# cg_template_frozen, cg_template_thawed.
#

# Throttle template
#
# This is used to reign in a poorly behaving gear.
[cg_template_throttled]
  cpu_shares=<%= scope.lookupvar('::openshift_origin::node_throttle_cpu_shares') %>
  cpu_cfs_quota_us=<%= scope.lookupvar('::openshift_origin::node_throttle_cpu_cfs_quota_us') %>
  apply_period=<%= scope.lookupvar('::openshift_origin::node_throttle_apply_period') %>
  apply_percent=<%= scope.lookupvar('::openshift_origin::node_throttle_apply_percent') %>
  restore_percent=<%= scope.lookupvar('::openshift_origin::node_throttle_restore_percent') %>

# Freeze and Thaw templates
#
# These are used during gear destroy to lock a cgroup from changing.
[cg_template_frozen]
  freezer_state="FROZEN"

[cg_template_thawed]
  freezer_state="THAWED"

# Boosted template
#
# This is used during certain gear operations to enhance performance
[cg_template_boosted]
  cpu_shares=<%= scope.lookupvar('::openshift_origin::node_boosted_cpu_shares') %>
  cpu_cfs_quota_us=<%= scope.lookupvar('::openshift_origin::node_boosted_cpu_cfs_quota_us') %>
